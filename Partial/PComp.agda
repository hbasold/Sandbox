{-# OPTIONS --without-K #-}

module PComp where

open import Data.Empty
open import Data.Sum
open import Data.Nat as Nat
open import Data.Nat.Properties.Simple
open import Data.Nat.Properties
open import Data.Product
open import Data.Bool renaming (Bool to ùîπ)
open import Data.Bool.Properties
open import Relation.Nullary
open import Relation.Binary.PropositionalEquality

open import Relation.Binary
open DecTotalOrder Nat.decTotalOrder using () renaming (refl to ‚â§-refl; trans to ‚â§-trans)

-- open import Size

-- record D {i : Size} (A : Set) : Set where
--   coinductive
--   field step : {j : Size< i} ‚Üí A ‚äé D {j} A

-- open D public

-- Œº' : ‚àÄ{i} ‚Üí (‚Ñï ‚Üí ùîπ) ‚Üí ‚Ñï ‚Üí D {i} ‚Ñï
-- Œº' p n .step = if p n then inj‚ÇÅ n else inj‚ÇÇ (Œº' p (suc n))

primRec : {X Y : Set} ‚Üí (X ‚Üí Y) ‚Üí (‚Ñï ‚Üí Y ‚Üí X ‚Üí Y) ‚Üí ‚Ñï ‚Üí X ‚Üí Y
primRec f g zero    x = f x
primRec f g (suc n) x = g n (primRec f g n x) x

record D (A : Set) : Set where
  coinductive
  field step : A ‚äé D A

open D public

Œº' : (‚Ñï ‚Üí ùîπ) ‚Üí ‚Ñï ‚Üí D ‚Ñï
c : (‚Ñï ‚Üí ùîπ) ‚Üí ‚Ñï ‚Üí ùîπ ‚Üí ‚Ñï ‚äé (D ‚Ñï)

Œº' p n .step = c p n (p n)

c p n false = inj‚ÇÇ (Œº' p (1 + n))
c p n true  = inj‚ÇÅ n

Œº : (‚Ñï ‚Üí ùîπ) ‚Üí D ‚Ñï
Œº p = Œº' p 0

isEven : ‚Ñï ‚Üí ùîπ
isEven zero = true
isEven (suc zero) = false
isEven (suc (suc n)) = isEven n

data _‚Üì_ {A : Set} (d : D A) (a : A) : Set where
  now    :                d .step ‚â° inj‚ÇÅ a            ‚Üí d ‚Üì a
  later  : {d' : D A} ‚Üí  d .step ‚â° inj‚ÇÇ d' ‚Üí d' ‚Üì a  ‚Üí d ‚Üì a

foo : Œº' isEven 3 ‚Üì 4
foo = later (cong inj‚ÇÇ refl) (now refl)

Œº-finds-tt : ‚àÄ{p : ‚Ñï ‚Üí ùîπ} {m n : ‚Ñï} ‚Üí Œº' p m ‚Üì n ‚Üí p n ‚â° true
Œº-finds-tt {p} {m} (now q)        with p m  | inspect p m
Œº-finds-tt {p} {m} (now ())        | false  | _
Œº-finds-tt {p} {m} (now refl)      | true   | [ eq ]       = eq
Œº-finds-tt {p} {m} (later q t)    with p m
Œº-finds-tt {p} {m} (later refl t)  | false = Œº-finds-tt t
Œº-finds-tt {p} {m} (later () t)    | true

-- | Compute the number of steps taken to obtain p n = tt.
Œº-dist : ‚àÄ{p : ‚Ñï ‚Üí ùîπ} {m n : ‚Ñï} ‚Üí Œº' p m ‚Üì n ‚Üí ‚àÉ Œª k ‚Üí n ‚â° m + k
Œº-dist {p} {m} (now q)        with p m
Œº-dist {p} {m} (now ())        | false
Œº-dist {p} {m} (now refl)      | true = (0 , sym (+-right-identity m))
Œº-dist {p} {m} (later q t)    with p m
Œº-dist {p} {m} (later refl t)  | false =
  let (k , e) = Œº-dist t
  in (1 + k , trans e (sym (+-suc m k)))
Œº-dist {p} {m} (later () t)    | true

empty-interval : ‚àÄ {m k} ‚Üí m ‚â§ k ‚Üí k < m ‚Üí ‚ä•
empty-interval z‚â§n ()
empty-interval (s‚â§s p) (s‚â§s q) = empty-interval p q

suc‚â§‚áí‚â§ : ‚àÄ m n ‚Üí suc m ‚â§ n ‚Üí m ‚â§ n
suc‚â§‚áí‚â§ m zero ()
suc‚â§‚áí‚â§ .0 (suc n) (s‚â§s z‚â§n) = z‚â§n
suc‚â§‚áí‚â§ .(suc _) (suc .(suc _)) (s‚â§s (s‚â§s p)) = s‚â§s (suc‚â§‚áí‚â§ _ _ (s‚â§s p))

-- | The proof proceeds by induction on the termination proof t : Œº' p m ‚Üì n.
-- In the process, we first distinguishing whether m = k or m < k.
-- Next, we check whether the computation has termination, that is, whether
-- t = now ... or t = later.
-- Finally, we distinguish on the values of p m, which allows us to make
-- a computation step with Œº'. The other cases follow then from there.
Œº-min : ‚àÄ{p : ‚Ñï ‚Üí ùîπ} {m n : ‚Ñï} ‚Üí Œº' p m ‚Üì n ‚Üí ‚àÄ k ‚Üí m ‚â§‚Ä≤ k ‚Üí k < n ‚Üí p k ‚â° false
-- m = k
---- t = now
Œº-min {p} {.m} (now q)       m ‚â§‚Ä≤-refl u with p m
Œº-min {p} {.m} (now q)       m ‚â§‚Ä≤-refl u | false = refl
Œº-min {p} {.m} (now refl)    m ‚â§‚Ä≤-refl u | true  = ‚ä•-elim (1+n‚â∞n u)

-- m = k
---- t = later
Œº-min {p} {.m} (later q t)   m ‚â§‚Ä≤-refl u with p m
Œº-min {p} {.m} (later q t)   m ‚â§‚Ä≤-refl u | false = refl
Œº-min {p} {.m} (later () t)  m ‚â§‚Ä≤-refl u | true

-- m < k
---- t = now
Œº-min {p} {m}        (now q)    .(suc _) (‚â§‚Ä≤-step l) u    with p m
Œº-min {p} {m}        (now ())   .(suc _) (‚â§‚Ä≤-step l) u       | false
Œº-min {p} {.(suc _)} (now refl) .(suc _) (‚â§‚Ä≤-step l) (s‚â§s u) | true =
  ‚ä•-elim (empty-interval (suc‚â§‚áí‚â§ _ _ (‚â§‚Ä≤‚áí‚â§ l)) u)

-- m < k
---- t = later
Œº-min {p} {m} (later q    t) .(suc _) (‚â§‚Ä≤-step {k'} l) u with p m
Œº-min {p} {m} (later refl t) .(suc _) (‚â§‚Ä≤-step {k'} l) u    | false =
  Œº-min t (suc k') (s‚â§‚Ä≤s l) u
Œº-min {p} {m} (later ()   t) .(suc n) (‚â§‚Ä≤-step {n} l)  u    | true

Min : (‚Ñï ‚Üí Set) ‚Üí ‚Ñï ‚Üí Set
Min P n = P n √ó ‚àÄ k ‚Üí k < n ‚Üí ¬¨ (P k)

-- | Definition of partial correctness for the Œº-operator.
-- This states that if Œº p terminates with n as result, then n is the
-- minimal number, for which p n ‚â° true.
PartialCorrectness : Set
PartialCorrectness = ‚àÄ{p : ‚Ñï ‚Üí ùîπ} {n : ‚Ñï} ‚Üí
  Œº p ‚Üì n ‚Üí Min (Œª k ‚Üí p k ‚â° true) n

Œº-pcorrect : PartialCorrectness
Œº-pcorrect t = (Œº-finds-tt t , (Œª k u ‚Üí not-¬¨ (Œº-min t k (z‚â§‚Ä≤n) u)))

-- Correctness : Set
-- Correctness = ‚àÄ{p : ‚Ñï ‚Üí ùîπ} ‚Üí
--   ¬¨(‚àÉ Œª n ‚Üí Œº p ‚Üì n) ‚Üí ‚àÄ n ‚Üí ¬¨(p n ‚â° true)

-- find-min' : ‚àÄ{p : ‚Ñï ‚Üí ùîπ} ‚Üí ‚àÄ n ‚Üí p n ‚â° true ‚Üí (m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí
--             (‚àÉ Œª k ‚Üí k ‚â§ n √ó p k ‚â° true)
-- find-min' {p} last pt zero l with p 0 | inspect p 0
-- find-min' {p} last pt zero l | false | e = (last , ‚â§-refl , pt)
-- find-min' {p} last pt zero l | true | [ e ] = (zero , l , e)
-- find-min' {p} last pt (suc m) l with p m | inspect p m
-- find-min' {p} last pt (suc m) l | false | e =
--   find-min' last pt m (suc‚â§‚áí‚â§ m last l)
-- find-min' {p} last pt (suc m) l | true | [ e ] =
--   let (k , k‚â§last , q) = find-min' {p} m e m ‚â§-refl
--   in (k , ‚â§-trans k‚â§last (suc‚â§‚áí‚â§ m last l) , q)

-- find-min : ‚àÄ{p : ‚Ñï ‚Üí ùîπ} ‚Üí ‚àÄ n ‚Üí p n ‚â° true ‚Üí (‚àÉ Œª k ‚Üí k ‚â§ n √ó p k ‚â° true)
-- find-min {p} n pt = find-min' {p} n pt n ‚â§-refl

-- min-terminate : ‚àÄ{p : ‚Ñï ‚Üí ùîπ} ‚Üí ‚àÄ n (e : p n ‚â° true) (m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí ‚àÉ Œª k ‚Üí Œº p ‚Üì k
-- min-terminate {p} last pt zero m‚â§n with p 0 | inspect p 0
-- min-terminate {p} last pt zero m‚â§n | false | e = {!!} , {!!}
-- min-terminate {p} last pt zero m‚â§n | true | e = {!!}
-- min-terminate {p} last pt (suc m) m‚â§n = {!!}


-- lem : ‚àÄ{p : ‚Ñï ‚Üí ùîπ} ‚Üí ‚àÄ n ‚Üí p n ‚â° true ‚Üí ‚àÉ Œª k ‚Üí Œº p ‚Üì k
-- lem {p} zero q with p 0   | inspect p 0
-- lem {p} zero () | false | _
-- lem {p} zero q | true | [ e ] = (0 , now (cong (c p 0) e))
-- lem {p} (suc n) q with p (suc n)   | inspect p (suc n)
-- lem {p} (suc n) () | false | e
-- lem {p} (suc n) q | true | e =
--   let (k , t) = lem n {!!}
--   in (suc n , now {!!})

-- Œº-correct : Correctness
-- Œº-correct q n pt = q (lem n pt)
